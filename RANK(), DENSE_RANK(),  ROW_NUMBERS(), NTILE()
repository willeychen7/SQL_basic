+--------------+------------------------------------------------+
| Function     | Description                        | Example   |
+--------------+------------------------------------+-----------+
| RANK()       | Gaps in ranking if there are ties. | 1, 2, 2, 4|
+--------------+------------------------------------+-----------+
| DENSE_RANK() | No gaps, same rank for ties.       | 1, 2, 2, 3| TIE
+--------------+------------------------------------+-----------+
| ROW_NUMBER() | Unique rank, no ties.              | 1, 2, 3, 4|
+--------------+------------------------------------+-----------+
WHEN TO USE PARTITION: calculating by rows, such as calculating running totals of expense for each department. 
WHEN TO USE GROUP BY: Removes row-level details and returns only grouped results.

JOIN() could led to more complex operation VS RANK()


Example1: Top 5 Artists Spotify (Medium)
Assume there are three Spotify tables: artists, songs, and global_song_rank, which contain information about the artists, songs, and music charts, respectively.
Write a query to find the top 5 artists whose songs appear most frequently in the Top 10 of the global_song_rank table. Display the top 5 artist names in 
ascending order, along with their song appearance ranking. If two or more artists have the same number of song appearances, they should be assigned the same 
ranking, and the rank numbers should be continuous (i.e. 1, 2, 2, 3, 4, 5). 
If you've never seen a rank order like this before, do the rank window function tutorial.

-- ANSWER:
SELECT *
FROM(
    SELECT 
      a.artist_name, 
      DENSE_RANK() OVER(ORDER BY count(g.song_id) DESC) AS artist_rank
    FROM artists a 
    LEFT JOIN songs s ON a.artist_id = s.artist_id
    LEFT JOIN global_song_rank g ON s.song_id = g.song_id
    WHERE g.rank<=10
    GROUP BY a.artist_name) subq
WHERE artist_rank<=5
ORDER BY artist_rank ASC, artist_name ASC
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------

Example 2:
Assume you're given a table on Walmart user transactions. Based on their most recent transaction date, 
write a query that retrieve the users along with the number of products they bought.

-- ANSWER1 - USING DENSE_RANK:
SELECT transaction_date, user_id, purchase_count
FROM(
  SELECT 
  transaction_date,
  user_id,
  count(product_id) as purchase_count,
  DENSE_RANK() OVER(PARTITION BY user_id ORDER BY transaction_date DESC) as date_rk
FROM user_transactions
GROUP BY transaction_date,user_id) as subq
WHERE date_rk = 1
ORDER BY transaction_date ASC


-- ANSWER2 - USING JOIN:
SELECT 
  r.transaction_date,
  r.user_id,
  count(product_id) as purchase_count
FROM (
SELECT 
  max(transaction_date) as transaction_date,
  user_id
FROM user_transactions
GROUP BY user_id) as r
LEFT JOIN user_transactions u on 
  r.user_id = u.user_id AND r.transaction_date = u.transaction_date
GROUP BY r.transaction_date,r.user_id
ORDER BY r.transaction_date ASC
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------


Example 3: Write a query to display the list of artists sorted in descending order of their concert revenue.
-- ANSWER:
SELECT 
 artist_name, 
 concert_revenue, 
 ROW_NUMBER() OVER (ORDER BY concert_revenue) AS row_num,
 RANK() OVER (ORDER BY concert_revenue) AS rank_num,
 DENSE_RANK() OVER (ORDER BY concert_revenue) AS dense_rank_num
FROM concerts;
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------


Example 4: Write a query to display the list of artists sorted in descending order of their concert revenue by COUNTRY.
-- ANSWER
SELECT 
  artist_name, 
  country,
  year_of_formation,
  ROW_NUMBER() OVER (PARTITION BY country ORDER BY year_of_formation) AS row_num,
 RANK() OVER (PARTITION BY country ORDER BY year_of_formation) AS rank_num,
 DENSE_RANK() OVER (PARTITION BY country ORDER BY year_of_formation) AS dense_rank_num
FROM concerts;
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------


Example 5:
Selecting the Top-Selling Artists within Each Genre

SELECT
  artist_name,
  concert_revenue,
  genre,
  number_of_members,
  revenue_per_member
FROM (
  -- Subquery Result
  SELECT
    artist_name,
    concert_revenue,
    genre,
    number_of_members,
    (concert_revenue / number_of_members) AS revenue_per_member,
    RANK() OVER (
      PARTITION BY genre
      ORDER BY (concert_revenue / number_of_members) DESC) AS ranked_concerts
  FROM concerts) AS subquery
WHERE ranked_concerts = 1
ORDER BY revenue_per_member DESC;
----------------------------------------------------------------------------
----------------------------------------------------------------------------


Example 6:
NTILE() split data into N equal groups:

SELECT 
    category, 
    product, 
    sales, 
    NTILE(3) OVER (PARTITION BY category ORDER BY sales DESC) AS sales_rank
FROM product_sales;  --> OUTPUT 4 tiles.

