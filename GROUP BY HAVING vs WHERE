+------------------------------------------------------------------------------------------------------+
WHERE Clause:
-- Purpose: Filters individual rows before any grouping or aggregation takes place; filter out non-matching queries
-- Use Case: Used to filter data at the row level, based on conditions applied to individual columns.
-- When Evaluated: Applied during the data selection phase, before aggregation.


HAVING Clause:
-- Purpose: Filters aggregated rows after grouping or aggregation has been performed.
-- Use Case: Used to filter aggregated results, such as totals or counts.
-- When Evaluated: Applied during the result filtering phase, after aggregation.
--------------------------------------------------------------------------------------------------------

Example 1:
Table: Sales
+-------------+-------+
| Column Name | Type  |
+-------------+-------+
| sale_id     | int   | PK1
| product_id  | int   | FK
| year        | int   | PK2
| quantity    | int   |
| price       | int   |
+-------------+-------+

Table: Product
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     | PK
| product_name | varchar |
+--------------+---------+

Input: 
Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+
Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+
Output: 
+------------+------------+----------+-------+
| product_id | first_year | quantity | price |
+------------+------------+----------+-------+ 
| 100        | 2008       | 10       | 5000  |
| 200        | 2011       | 15       | 9000  |
+------------+------------+----------+-------+


-- ANSWER1 subquery
select product_id, year as first_year, quantity, price
from Sales
WHERE (product_id, year) in (
    select product_id, min(year)
    from Sales
    group by product_id
)


-- ANSWER2 CTE
WITH CTE AS(
    SELECT product_id, min(year) as first_year
    FROM Sales 
    GROUP BY product_id
)

SELECT product_id, year as first_year, quantity, price
FROM Sales
WHERE (product_id, year) IN (
    SELECT *
    FROM CTE
)

--------------------------------------
Explain: WHY CANNOT USE GROUP BY?
SELECT
    product_id, min(year) as first_year, quantity, price
FROM Sales
GROUP BY product_id

BECAUSE min(year) only replace every number in the 'year' column to minimum for each product_id. It DOES NOT
EXTRACT the row that have the min(year) row.

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

Example 2
SELECT 
    activity_date AS day,
    COUNT(distinct user_id) AS active_users
FROM Activity
WHERE activity_date BETWEEN '2019-07-27'-INTERVAL 29 DAY AND '2019-07-27'
GROUP BY activity_date

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

Example 3: Dont use WHERE clause --> filter out non-matching queries
IBM is analyzing how their employees are utilizing the Db2 database by tracking the SQL queries executed 
by their employees. The objective is to generate data to populate a histogram that shows the number of unique 
queries run by employees during the third quarter of 2023 (July to September). Additionally, it should count 
the number of employees who did not run any queries during this period.

Display the number of unique queries as histogram categories, along with the count of employees who executed that number of unique queries.

queries Schema:
+-------------------+---------+
|    Column Name    |  Type   |
+-------------------+---------+
|    employee_id    | integer |	The ID of the employee who executed the query.
|    query_id	    | integer |	The unique identifier for each query (Primary Key).
|   query_starttime	| datetime|	The timestamp when the query started.
|   execution_time	| integer | The duration of the query execution in seconds.
+-------------------+---------+

employees Schema:
+-------------------+---------+
|    Column Name    |  Type   |
+-------------------+---------+
|    employee_id    | integer |The ID of the employee who executed the query.
|     full_name	    | string  |The full name of the employee.
|       gender    	| string  |The gender of the employee.
+-------------------+---------+

-- ANSWER
SELECT unique_queries, count(employee_id)
FROM (
SELECT 
    e.employee_id, 
    COALESCE(count(distinct query_id),0) as unique_queries
FROM employees e
LEFT JOIN  queries ON 
    queries.employee_id = e.employee_id AND 
    query_starttime >='2023-07-01' AND 
    query_starttime<'2023-10-01'
GROUP BY e.employee_id
ORDER BY unique_queries) subquery
GROUP BY unique_queries
ORDER BY unique_queries


